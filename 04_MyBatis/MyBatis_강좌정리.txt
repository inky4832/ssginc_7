MyBatis 프레임워크

1. 개요
 - JDBC 사용을 편리하고 효율적이며 기능이 추가된 형태의 SQL Mapping Framework 이다. ( 외부 라이브러리 )
 - ibatis( old 버전 )

2. 환경설정 

  - mybatis 라이브러리 (jar) 필요.

    http://mybatis.org 


    products 탭 > MyBatis 3 프로젝트 선택 >  download 선택 > mybatis-3.5.14 > mybatis-3.5.14.zip 다운하고 압축풀기
  
  - 이클립스에서 build path 

    2개의 jar ( mybatis-3.5.14.jar 와 mysql-connector-j-8.0.33.jar )

3. MyBaits 사용방법

  1) JDBC에서 사용했던 4가지 정보를 외부파일에 저장한자. ( key=value 형식의 데이터는 *.properties 사용한다. )

     - jdbc.properties
     - src 폴더에 저장 ( package 설정 가능 )

       src
         com
	   config
	        jdbc.properties


  2) DTO 클래스 작성
    - DTO ( Data Transfer Object)는 테이블의 레코드 저장 용도로서
      일반적으로 테이블당 하나씩 생성한다.

      예> dept 테이블 --> com.dto.DeptDTO
          deptno 컬럼      deptno 변수
	  dname 컬럼       dname 변수
	  loc   컬럼       loc    변수

          emp 테이블 --> com.dto.EmpDTO

    - 테이블의 컬럼명과 DTO 클래스의 변수명은 일치하는 것을 권장한다. ( 달라도 무관 )
      이유는 테이블의 컬럼명과 일치하는 클래스의 변수에 자동으로 값을 저장한다.
      만약 일치하지 않으면 개발자가 명시적으로 매핑작업을 추가해야 된다.


  3) 2개의 xml 파일이 필요

   가.  설정 파일
      - Mybatis의 환경설정을 설정하는 용도. ( 내용은 MyBatis 문서 참조 )
      - Configuration.xml
      - src 폴더에 저장 ( package 설정 가능 )

       src
         com
	   config
	        Configuration.xml

      - 설정 정보는 다음과 같다.
        jdbc.properties 설정해서 4가지 정보를 이용해서 DB 연동이 된다.
        DeptMapper.xml 설정해서 dept테이블에 select 및 dml 요청이 가능하다.
	설정시 주의할 점은 패키지는 .(dot)가 아닌 / 로 설정해야 된다.

   나. mapper 파일
      - JDBC에서 사용했던 SQL문을 설정하는 용도. ( 내용은 MyBatis 문서 참조 )
      - 테이블단 하나씩 작성 (  테이블명Mapper.xml )
      - src 폴더에 저장 ( package 설정 가능 )

        src
         com
	   config
	        DeptMapper.xml

  4.  자바에서 Configuration.xml 파일 등록 ( 내용은 MyBatis 문서 참조 )


        String resource = "com/config/Configuration.xml";
	InputStream inputStream = Resources.getResourceAsStream(resource);
	SqlSessionFactory sqlSessionFactory =
	  new SqlSessionFactoryBuilder().build(inputStream);


       위 코드를 구현한 클래스 파일을 작성하자. ( com.config.MySqlSessionFactory.java )
         SqlSessionFactory 에서 SqlSession 을 얻음.
	 이 SqlSession 의 메서드를 이용해서 DB 연동을 한다.


    *  JDBC vs  MyBatis

       가. JDBC 에서 필요한 API
	  
	   - java.sql.Connection
	     java.sql.PreparedStatement
	     java.sql.ResultSet 

	     마지막에는 역순으로 close() 해야됨.

	   - 트랜잭션은 auto commit.
	   - 반드시 예외처리 필수 ( try~catch ). <=== compile checked 예외

       나. MyBatis 에서 필요한 API

           - org.apache.ibatis.session.SqlSession

	      SqlSessionFactory에서 openSession() 이용해서 얻는다.

	      마지막에는 SqlSession을 close() 해야됨.

          - 트랜잭션은 auto commit 아님. 따라서 명시적으로 commit() / rollback() 호출해야 된다.
          - 예외처리 필요없음  <== compile unchecked 예외. 즉 RuntimeException 예외가 발생됨.

	     내부적으로 compile checked 예외인 SQLException 을 
	             compile unchecked 예외인 RuntimeException 계열로 변경한다.
             따라서 사용자는 RuntimeException 계열 예외를 만나기 때문에 예외처리가 필요없다. 
	     catch는 필요할때만 사용하면 된다.

  5.  mapper 작성
 
     - 태그를 이용해서 CRUD 가능.
     - 동일한 태그를 여러개 지정할 수 있고 id 속성 이용해서 구분한다. ( 하나의 mapper 파일안에서 id값은 유일해야 됨 )
      예> 
         select 작업:
	             <select id="finAll" resultType="select한결과를저장할DTO클래스">
                         select * from dept
		     </select>
		     <select id="findDeptnoAndDname" resultType="select한결과를저장할DTO클래스">
                         select deptno, dname from dept
		     </select>

         insert 작업:
	             <insert id="">
                         insert 문
		     </insert>

         update 작업:
	             <update id="">
                         update 문
		     </update>

         delete 작업:
	             <delete id="">
                         delete 문
		     </delete>

   6. SqlSession의 메서드
    
     - mapper의 태그와 연동하는 메서드이 제공됨.

      1) select문

         가. 단일행 ( 리턴값은 DTO 받는 경우)

	   mapper에서 resultType으로 지정된 타입 변수명 = session.selectOne(String); // String값은 mapper의 id값
           session.selectOne(String, Object); // Object는 where절에 사용되는 파라미터값

           예> 
	        <select id="find10" resultType="com.dto.DeptDTO">
		     select deptno, dname, loc 
		     from dept
		     where deptno = 10
		 </select>

	      DeptDTO dto = session.selectOne("namespace명.find10");

	   만일 존재하지 않는 id를 사용하면 다음과 같은 에외가 발생된다.
	   Mapped Statements collection does not contain value for find100


           실행결과를 보면 select 한 결과가 자동으로 DTO의 변수에 저장( set컬럼명 )이 되고
	               파라미터로 전달한 DTO의 변수값이 자동으로 select 문의 where 절에 (#{변수명}) 설정( get컬럼명 )이 됨.
             
 

	 나. 복수행 ( 리턴값은 DTO에 하나의 레코드를 저장하고 저장된 DTO을 List에 저장해서 반환 )

	    List<DeptDTO> list = session.selectList(String);          // String값은 mapper의 id값
	    List<DeptDTO> list = session.selectList(String, Object); // Object는 where절에 사용되는 파라미터값
	    List<DeptDTO> list = session.selectList(String, Object, RowBounds);


      2) insert문

	   int n =  session.insert(String);   // String값은 mapper의 id값, n 값은 변경된 레코드 갯수
	   int n =  session.insert(String,Object );  // Object는 values절 사용되는 파라미터값

      3) update문
 
           int n =  session.update(String);   // String값은 mapper의 id값, n 값은 변경된 레코드 갯수
	   int n =  session.update(String,Object );  // Object는 where 및 set절 사용되는 파라미터값


      4) delete문
     
           int n =  session.delete(String);   // String값은 mapper의 id값, n 값은 변경된 레코드 갯수
	   int n =  session.delete(String,Object );  // Object는 where 절 사용되는 파라미터값
 
 

    7.   mapper 의 namespace 용도
  
       - 여러 mapper 파일이 있고 동일한 id를 가진 태그 요청시 id만 사용하면 중복되었기 때문에 에러가 발생됨. ( 식별이 안되기 때문)
         namespace.id 로 요청하면 namespace 가 다르기 때문에 동일한 id값일지라도 실행이 됨.
	 따라서 namespace는 유일해야 된다.

       예>   int n = session.insert("namespace명.id값");

///////////////////////////////////////////////////////////////////
     * XML 다운로드 문제로 인해 xml 에서 에러 발생시 해결방법
      이클립스 Window > Preferences > XML ( Wild Web Developer ) 선택 >  Download external resource ... 체크

     * dtd, xsd
     - xml은  eXtensible Markup Language 로서 태그로 구성되어 있음. 예> <태그명 속성명="속성값" 속성명="속성값"></태그명>
             시작태그에 속성명="속성값" 지정할 수 있고 중첩이 가능하다.
	     태그명과 속성명은 임의로 지정할 수 있고 사용자가 필요한 데이터를 저장하는 용도로 사용된다.
	     예> <person>
                   <name>홍길동</name>
		   <age>20</age>
	        </person>
		<user 속성명="속성값">
                   <name>홍길동</name>
		   <age>20</age>
		   <phone>010-1234</phone>
		   <phone>010-23454</phone>
	        </user>

     - *.dtd 와 *.xsd 용도
      
       사용자간에 xml 의 태그명과 속성명, 데이터타입, 태그중복여부 및 횟수 등 약속을 정하는 문법이다.
       
        A 사용자(개인,기업,..)                   B 사용자(개인,기업,..)


///////////////////////////////////////////////////////////////////
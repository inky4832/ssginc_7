
강사명: 인경열
이메일: inky4832@daum.net


1. 회원가입
 
  - 구글
  - github
  - 오라클
    http://www.oracle.com

2. 환경설정

  1) JDK ( Java Development Kit ) 설치
    - C:\Program Files\Java\jdk-17 에 기본적으로 설치됨.
    - 환경변수 설정
      시작 > 마우스 오른쪽 클릭 > 시스템 > 고급 시스템 설정 > 고급 탭 > 환경변수 

      JAVA_HOME=C:\Program Files\Java\jdk-17  <=== JDK의 홈디렉터리 경로 설정
      PATH=%JAVA_HOME%\bin;기본PATH                                   <=== 윈도우의 프로그램에 명령어 경로 설정
           C:\Program Files\Java\jdk-17\bin;기본PATH   

      * 주요 명령어 2개

       javac.exe ( 컴파일하는 명령어, 컴파일러(compiler) 라고 부름 )

       java.exe  ( 실행하는 명령어,  인터프리터(interpreter) 라고 부름 )


      * 자바 실행 순서

      소스 파일( *.java 예> Test.java )
         |
      컴파일 작업 ( 컴파일러 이용: javac.exe )
                
		문법:  javac Test.java  <=== Test.class 파일이 생성됨 

         |
      실행 작업 ( 인터프리터 이용: java.exe )

                문법:  java Test        <=== Test 클래스가 실행되어 결과가 나옴.


      * JDK 설치시 설치되는 JVM ( Java Virtual Machine )


         *.class
        -------------
         JVM 
        --------------
          OS ( Window, Linux, Mac )
         -------
	   H/W
   
       JDK ( Java Development Kit     : 자바개발 환경 ) <==== 실제로 자바어플리케이션 개발하는 개발자 환경
                                                          JRE +  API + 개발도구( javac, ... ) 

       JRE ( Java RunTime Environment : 자바실행 환경 ) <==== 실제로 자바어플리케이션을 실행하는 일반 사용자 환경.
                                                          JVM + API

       자바 API : 자바에서 미리 만들어서 제공된 클래스 파일들을 의미.
                압축해서 제공됨. ( *.jar 형식 )
             
	       C:\Program Files\Java\jdk-17\lib\src.zip 파일이 API의 소스파일.

             * 자바의 압축 파일 3가지
  
               -jar
	         => 일반적인 SE 환경의 압축파일
                    예> *.jar
	       -war
	         => 일반적인 EE 환경의 압축파일
                    예> *.war
	       -ear
                 => jar + war 환경의 압축파일
                    예> *.ear

      자바 API 문서 :  어떤 자바 API가 있는지 알려주는 메뉴얼.
                    웹으로 제공됨.
           https://docs.oracle.com/en/java/javase/17/docs/api/index.html



   2) 개발툴 ( IDE )
     - 인텔리제이 (
       http://www.jetbrains.com

     - 이클립스
       http://www.eclipse.org
       인스톨 프로그램 아님. 압축 풀면 설치됨.
       C:\java_study\eclipse\workspace 생성  > eclipse.exe 실행
       
       eclipse 실행후 추가작업
        가. 한글 인코딩 설정 (utf-8)
           elcipse의 window항목 > preference > General > workspace 에서 Text File Encoding 에서
	   UTF-8로 설정.

	나. 글꼴 설정
	   elcipse의 window항목 > preference > General > Apper~ > Color&Fonts > Basic > Text Font 에서 설정

        다. 컴파일러 버전 변경
            elcipse의 window항목 > preference > Java > Compiler 에서 현재 21 --> 17로 변경.

        라. JRE 변경

	    elcipse의 window항목 > preference > installed JRE > 기존 JRE 삭제.

3. 자바 특징
  - OOP( Object Oriented Programming )
  - 플랫폼 독립적 ( OS 독립적 )
    가능한 이유가 JVM 덕분이다.
  - 개발자가 더 이상 메모리를 관리하지 않는다. ( GC: Garbage Collector )
    GC가 메모리에 있는 사용되지 않는 인스턴스(클래스가 메모리에 올라간 상태)를 자동으로 제거한다.

4. 자바 개발 환경 3가지 ( 기준: 디바이스(장치))

   1) Java SE ( Java Standard Edition )
      - 일반 PC 	
      - 자바 기술
      - 구축방법: JDK 설치

   2) Java EE ( Java Enterprise Edition )
      - 서버(웹 서버)
      - 웹페이지 개발 기술 ( Servlet & JSP )
      - 구축방법: Tomcat 설치

   3) Java ME ( Java Micro Edition )
      - 휴대용 장치 ( PDA, 셋탑박스 )


5. 이클립스 프로젝트 생성

  - module 는 체크 안함 (****************)
  
6. 자바 클래스 작성 ( *.java )

   - 반드시 첫글자는 영문자이고 또는 _ (언더바) 또는 $ 만 가능하다.
     이후에 숫자지정은 가능.
   
   - 대소문자 구별됨.
   - 특수문자는 _ (언더바) 또는 $ 2개만 가능.
   - 한글은 가능하지만 권장안함.
   - 자바클래스 첫글자는 반드시 대문자로 지정한다. ( 권장 )
  
   - 문법:
   
        public class 클래스명{
          
	    //구성요소 3가지
	    // 1. 변수
	    // 2. 생성자
	    // 3. 메서드

	}

   - 반드시 지정된 클래스명으로 파일을 저장해야 된다. ( 클래스명.java )
   - 자바에서는 클래스가 프로그램의 최소 단위이다.
     매우 비효율적이다. 따라서 함수형 프로그래밍이다.( 클래스 없이 메서드 사용 가능) 
     람다(lambda) 표현식이라고 부름. (****************)

7.  main 메서드

   - 하나의 자바 어플리케이션을 작성할때 반드시 존재하는 메서드임. (*************)
   - main 메서드 역할은 실행하기 위함이다. 즉 프로그램의 시작점 역할 담당 ( starting point )
     반드시 다음 문법을 따라야 된다.
     public static void main(String [] args){}


   * 최종 샘플 코드

   public class HelloTest {
	public static void main(String[] args) {

		System.out.println("Hello World");
	}
 
    }

   클래스는 몇개 일까요 ?  3개
   HelloTest.class ( 개발자가 직접 만든 클래스 )
   String.class    ( API ) 
   System.class    ( API )


8. 이클립스 단축키 (********)

   - 저장: ctrl + s
   - 단일문장 주석: ctrl + /
   - 한줄 복사: ctrl + alt + 화살표키
   - 줄바꿈: alt + 화살표키
   - 한줄 삭제: ctrl + d
   - 이전 작업 취소: ctrl + z
   - sysout + ctrl + spacebar 하면 자동으로 System.out.println() 생성.
   - 코드 자동 완성: ctrl + spacebar


9. 식별자 ( identifier )

  1) 개념
     자바소스에서 지정한 단어.

  2)식별자 지정 문법
   - 반드시 첫글자는 영문자이고 또는 _ (언더바) 또는 $ 만 가능하다.
     이후에 숫자지정은 가능.
   - 대소문자 구별됨.
   - 특수문자는 _ (언더바) 또는 $ 2개만 가능.
   - 한글은 가능하지만 권장안함.
   - 자바클래스 첫글자는 반드시 대문자로 지정한다. ( 권장 )

     public class 클래스명{
          
	    //구성요소 3가지
	    // 1. 변수
	    // 2. 생성자
	    // 3. 메서드

	}

    클래스명 권장방법: 첫글자 대문자, 의미있는 명사형
    변수 권장방법: 모두 소문자, 의미있는 명사형
    생성자: 반드시 클래스명으로 지정해야 된다.
    메서드 권장방법: 모두 소문자, 의미있는 동사형

  3) 식별자 종류 

    가. 시스템이 미리 예약한 식별자 ( 시스템 정의 식별자 )
       - 예약어(키워드) 라고 부른다.
        예> public,protected,private,class,interface,
	   abstract,final,default, switch, for, if,
	   transient,void, enum,.....

    나. 사용자 정의 식별자
       - 클래스,변수,메서드 식별자가 됨.
       - 시스템 정의 식별자(예약어) 이름으로 지정하면 안됨.

   
   * 리터럴 ( literal )
     - 자바코드상에서 사용된 데이터 (값 ) 의미.
     예> 문자열 데이터 :   "홍길동",  "hello"
                   반드시 쌍따옴표 지정.

        문자 데이터 :  '남', '여'
                   반드시 홑따옴표 지정.
	정수 데이터 : 100
	실수 데이터 : 3.14
	논리 데이터 : 참/거짓
	          true/false

    ==> 자바는 문자열과 문자를 다르게 처리한다. (*********)

 * 괄호
  (): 소괄호
  {}: 중괄호
  []: 대괄호


10. 데이터 종류 ( 데이터 타입, 데이터형 )- (********************************)
  - 개념: 자바언어가 처리할 수 있는 데이터 종류 의미함.

  1) 기본형 데이터 ( Primitive Data Type: PDT )
     - 수치형 데이터
              - 정수:  byte ( 크기: 1byte, 8bit )
	             short ( 크기: 2byte, 16bit )
		     int   ( 크기: 4byte, 32bit )- 기본
		     long  ( 크기: 8byte, 64bit )
                    
		   정수 표현:  10진수,2진수,8진수,16진수 모두 표현 가능.
		    예> 10진수: 0~9 이용해서 표현
		              100, -30, 0
                       2진수: 0|1 이용해서 표현, 접두사로 0b 지정
		             0b1, 0b0
		       8진수: 0~7 이용해서 표현, 접두사로 0 지정
		             01,02,.....07
                       16진수: 0~9, A,B,C,D,E,F 이용해서 표현, 접두사로 0x 지정
		             0x1,0x2,.....0xE, 0xF

	      - 실수:  float ( 크기: 4byte, 32bit )
	             double ( 크기: 8byte, 64bit )- 기본

                  float 표현:  3.14F, 3.14f
		  double 표혐: 3.14 , 3.14D, 3.14d

      - 문자:   char 이용 ( 2byte ). 기본형 타입이다.
           반드시 ''(홑따옴표) 이용해서 표현
	   예> '남',  'A'
           이스케이프 문자도 지원한다.
	   예> \t : 키보드 tab 효과
	      \n : 키보드 enter 효과
	      \" : " 를 출력
              \' : ' 를 출력 
	      \\ : \ 를 출력
           
	  유니코드(unicode)로 처리되기 때문에 전 세계의 모든 언어 표현이 가능하다.
	  유니코드는 \u값 으로 표현된다.

     - 논리 데이터 : boolean (불린) ( 크기: 1byte, 8bit )
               
                 boolean 표현:  true (참)
		              false (거짓)
    
  ==> 기본형은 총 8개.

  2) 참조형 데이터 ( Reference Data Type: RDT )
     - 기본형 8가지가 아닌 나머지 모두.
      대표적으로 클래스,배열,인터페이스 가 있음.
      반드시 클래스,배열,인터페이스를 데이터로 간주하자.(*************)
//////////////////////////////////////////////////////////////////
1일차 리뷰

1. 자바 3가지 환경

   Java SE: 기본개발환경, JDK 설치, 2가지 환경변수 설정 ( JAVA_HOME, PATH )
   Java EE: 웹 개발 환경 ( Servlet/JSP ), Tomcat 설치
   Java ME: 휴대용 모바일 환경

2. 자바특징
   - OOP(Object Oriented Programming) :객체 지향 프로그래밍 방법론
     나중에 함수형 프로그래밍(자바에서는 람다(lambda)라고 부름)과 AOP(Aspect Oriented Programming: 관점 지향 프로그래밍)
     방법론을 배운다.
   - 플랫폼에 독립적 ( 어떤 OS건 한번 만든 자바 어플리케이션을 바로 실행이 가능하다. )
     플랫폼에 의존적인 언어도 있음( C언어 )
   - 자동으로 사용하지 않는 메모리에 올라간 인스턴스를 제거해줌. Garbage Collector(GC)가 해줌.
     결국 자바 개발자는 메모리 관련되서 신경쓸 필요가 없다.

3. 자바 개발 순서

   1)소스작성 ( Hello.java )
     
   2)컴파일
     - 컴파일러 이용해서 컴파일 한다. ( javac.exe )
     - 문법:  javac Hello.java

        Hello.java ---------------> Hello.class ( bytecode 라고 부름 ) 

   3)실행
     - 인터프리터 이용해서 실행 ( java.exe )
     - 문법:  java Hello
  
         Hello.class ------------------> 결과 출력

4. JVM ( Java Virtual Machine )

  - 역할: bytecode 를 실행하는 역할.
  - 구축방법: JDK 설치
  - H/W 느낌이 나지만 명백한 S/W 임.
   그런데 H/W 특징을 가짐 ( 다양한 메모리를 가짐 )
  - 주요 메모리 3가지: stack, heap, method area (******************)

5. 자바의 데이터종류 ( 데이터타입, 데이터형 )

  1) 기본형 데이터 ( Primitive Data Type :PDT )
  
      - 수치형 
             정수형 : byte  ( 1byte )
	            short ( 2byte )
		    int  ( 4byte ) - 기본 ( 만약 100 이라고 지정하면 int로 처리됨 )
		    long ( 8byte )
                   
		   - 10진수,2진수,8진수,16진수 표현 가능.

	     실수형 : float ( 4btye )
	            double ( 8byte ) - 기본 ( 만약 3.14 이라고 지정하면 double로 처리됨 )

		    float 표현: 3.14F, 3.14f
                    double 표현: 3.14, 3.14D, 3.14d

		    지수 표현 가능: 140.0 는 1.4E2로 표현 가능.

      - 문자형 : char ( 2byte )
               유니코드로 처리되기 때문에 전세계의 모든 언어 표현 가능.

      - 논리형 : boolean ( 1byte)
               true/false


  2) 참조형 데이터 ( Reference Data Type :RDT )

     - 기본형 8개를 제외한 나머지가 모두 참조형이다.
      대표적으로 클래스, 배열, 인터페이스가 있다.

///////////////////////////////////////////////////////////
2일차

1. int 와 long 

   - int 는 정수형의 기본타입이다.
     즉 만약 100 이라고 지정하면 int로 처리됨.

   - 만약 long 으로 처리하고자 한다면
      100L 형식으로 표현한다.
   
2. 문자와 문자열

  - 기본적으로 자바는 문자와 문자열을 다르게 처리한다.
  - 문자:   char 이용. 기본형 타입이다.
           반드시 ''(홑따옴표) 이용해서 표현
	   예> '남',  'A'
           이스케이프 문자도 지원한다.
	   예> \t : 키보드 tab 효과
	      \n : 키보드 enter 효과
	      \" : " 를 출력
              \' : ' 를 출력 
	      \\ : \ 를 출력
           
	  유니코드(unicode)로 처리되기 때문에 전 세계의 모든 언어 표현이 가능하다.
	  유니코드는 \u값 으로 표현된다.


    문자열:  String 클래스 이용, 참조형 타입이다.
           반드시 ""(쌍따옴표) 이용해서 표현
	   예> "남자",  "ABC"


3. wrapper 클래스 

 - 개념: 기본형 8개에 해당되는 8개의 클래스(API)를 묶어서 표현하는 이름.

  기본형              wrapper 클래스(참조형)
-----------------------------------
  byte		    Byte
  short             Short
  int               Integer
  long              Long

  float             Float
  double            Double

  char              Character

  boolean           Boolean


- API로 wrapper 클래스를 제공하는 이유: 기본형 데이터를 사용할 때 여러가지 정보 및 가공(동작)처리를 원활하게 할수 있도록 지원.
 
  예>  3.14 -----> 3 
       3---------> 3.0
      int(4byte)에 저장 가능한 정수크기?


4. 변수 ( Variable )

  1) 용도
    - 데이터(리터럴)를 저장.
    - 기본형 8 개 및 참조형(클래스,배열,인터페이스)도 변수에 저장할 수 있음.

  2) 기본 문법-1

     가. 변수 선언
        - 데이터가 저장될 영역 확보 작업
	- 문법:
	   
	     데이터형  변수명;

           예> 
	       // 기본형 타입
	       byte n;  // 1byte크기의 영역확보, 그 영역은 n 으로 접근.
	       short n2; // 2byte크기의 영역확보, 그 영역은 n2 으로 접근.
	       int n3;
	       long n4;
	       float f;   // 4byte크기의 영역확보, 그 영역은 f으로 접근.
	       double f2;  // 8byte크기의 영역확보, 그 영역은 f2으로 접근.
	       char c;     // 2byte크기의 영역확보, 그 영역은 c으로 접근.
	       boolean b;  // 1byte크기의 영역확보, 그 영역은 b으로 접근.

               // 참조형 타입
	       String s;  // 무조건 4byte크기의 영역확보, 그 영역은 s으로 접근.
               Byte s2;   // 무조건 4byte크기의 영역확보, 그 영역은 s2으로 접근.


     나. 초기화

       - 변수에 맨 처음 값을 저장하는 것을 의미.
         반드시 저장되는 값은 변수의 데이터형과 일치해야 된다.
       - 문법:
          
	     변수명 = 값;

          예>  int n3;
	      char c;
	      String s;

	      n3= 10;
	      c = '남';
	      s = "홍길동";

      
     다. 값변경 및 사용(출력)

            n3 = 20;
	    c = '여';

	   System.out.println(n3);
	   System.out.println(c);
	   System.out.println(s);

   2) 기본 문법-2

      - 변수선언과 초기화를 한꺼번에 지정 가능

      - 문법:

          데이터타입 변수명 = 값;

       예> 
           int n = 10;
	   char c = '남';
	   String s = "홍길동";

   2) 기본 문법-3

     - 같은 타입의 변수가 여러개 일 때 사용 가능. 권장안함

      예>
          int n;
	  int n2=10;
	  int n3;

      ==> int n,n2=10,n3;  ( 권장안함)


5. 변수의 종류-1
  
   1) 데이터 종류에 따라서 분류

    가. 기본형 변수
       - 기본형 데이터가 저장된 변수

       예> int n = 10;  // n은 변수
                          n은 int 타입의 변수
			  n은 정수형 변수
			  n은 기본형 변수
          char c = '남'; // c은 변수
	                   c는 char 타입의 변수
                           c는 문자형 변수
                           c는 기본형 변수

       - 기본형 변수는 변수에 실제 데이터가 저장되어 있음 (*******)
 
    나. 참조형 변수
       - 참조형 데이터가 저장된 변수

       예> String s = "홍길동";  // s는 변수
                                 s는 String 타입의 변수  
                                 s는 문자열 타입의 변수
				 s는 참조형 변수

       - 참조형 변수는 변수에 실제 데이터가 저장되어 있는 주소값이 저장되어 있음 (*******)
         즉 클래스,배열,인터페이스 타입의 변수는 참조형 변수이기 때문에 주소값이 저장되어 있다. (*******)

5. 변수의 종류-2

   - 변수 선언 위치와 용도에 따른 분류

   1)로컬 변수     ( local variable, 지역변수)
    - 변수선언위치:  메서드 안에서 선언된 변수
    - 생성시점:  메서드 실행 ( 메서드는 호출해야 실행이 된다. )
      소멸시점:  메서드가 끝날때
    - 저장메모리: stack 메모리
    - 생성횟수: 메서드가 호출해서 실행될때 마다 매번 생성
             메서드가 끝나면 매번 제거됨.
    - 용도: 일시적으로 임의의 데이터 저장하기 위해서 주로 사용됨.
    - 주의할 점: 반드시 사용하기 전에 초기화해야 된다.

   2)인스턴스 변수  ( instance variable )
    - 변수선언위치:  메서드 밖에서 선언된 변수
    - 생성시점: 클래스를 객체 생성할 때 ( 클래스 객체 생성는 new 키워드 이용)
      소멸시점: 메모리에 올라간 객체(인스턴스)가 소멸될 때
    - 저장메모리: heap 메모리
    - 생성횟수: 객체생성할때 마다 매번 생성됨.
    - 용도: 객체의 속성을 저장할 때 사용.
    - 초기화하지 않으면 자동으로 초기화 된다.
       기본형 데이터:  정수: 0
                   실수: 0.0
		   문자: \u0000  ( 빈문자)
		   논리: false
		   
       참조형(클래스,배열,인터페이스) 데이터: null

   3)클래스 변수    ( class variable, static variable )
    - 변수선언위치:  메서드 밖에서 선언된 변수 + static 키워드 지정
    - 생성시점: 프로그램 실행시 생성
      소멸시점: 프로그램 종료시 제거
    - 저장메모리: method area 메모리
    - 생성횟수: 1 번만 생성됨.
    - 초기화하지 않으면 자동으로 초기화 된다.
    - 초기화하지 않으면 자동으로 초기화 된다.
       기본형 데이터:  정수: 0
                   실수: 0.0
		   문자: \u0000  ( 빈문자)
		   논리: false
		   
       참조형(클래스,배열,인터페이스) 데이터: null
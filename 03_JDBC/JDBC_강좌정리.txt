
JDBC ( Java DataBase Connectivity )


1. 개요
  - 자바와 DBMS 연동하는 기술.

                    JDBC
   자바프로그램 ------------------------- DBMS(Mysql, Oracle, Ms-sql ... )

2. 특징
  - JDBC 는 DBMS 종류과 무관하게 일관된 방법으로 접근이 가능하다.
    어떤 DBMS 건 동일한 메서드를 사용할 수 있다. ( 인터페이스 이용 )
  - jdbc는 compile checked (비런타임)이기 때문에 반드시 try~cacth 예외처리 필수.
  - jdbc는 기본적으로 DML 작업은 auto commit 됨. (비활성화 가능 )
    현재는 계좌이체 같은 트랜잭션 처리 작업은 불가.


     자바                                                   DBMS
    -a. 인터페이스작성해서 벤더에 제공       ---------------->     mysql ( mysql-connector-j-8.0.33.jar : mysql 드라이버라고 부른다. )
       ( java.sql.Connection,                            b. 자바에서 제공된 인터페이스 implments 한 클래스파일들 작성
         java.sql.PreparedStatement,
	 java.sql.ResultSet
	 ..)
     c. DB연동 코드 작업...


3. mysql 드라이버 구하기 및 eclipse에서 mysql-connector-j-8.0.33.jar 인식시키기
 
   1) mysql 드라이버 구하기
    https://dev.mysql.com/downloads/connector/j/  > 버전 고려 > archieves 선택 >
     버전 선택 및 platform independent 선택 >   mysql-connector-j-8.0.33.zip 다운로드 > 압축 풀면
     mysql-connector-j-8.0.33.jar 제공됨.

   2) eclipse에서 mysql-connector-j-8.0.33.jar 인식시키기

       프로젝트 생성 > 프로젝트 선택후 오른쪽 클릭후 Build path > configure build path... >  3번째 탭 library 선택 >
       classpath 선택하고 Add External Jars >  mysql-connector-j-8.0.33.jar 선택해서 추가 > apply and close

4. JDBC 연동 코드

   1) mysql 접속 정보

      String driver ="com.mysql.cj.jdbc.Driver";
      String url="jdbc:mysql://localhost:3306/testdb";
      String userid="root";
      String passwd="1234";

   2) 드라이버 로딩 (com.mysql.cj.jdbc.Driver 를 메모리에 올리는 작업)
      => "패키지.클래스명" 를 사용하기 위해서는 Class.forName(문자열) 사용한다.

       Class.forName(driver);  // Class.forName("com.mysql.cj.jdbc.Driver");

       ClassNotFoundException 예외처리 필수로 설정.

   3) Connection 맺기 

      import java.sql.Connection;
      import java.sql.DriverManager;

      Connection con = DriverManager.getConnection(url, userid, passwd);

      SQLException 예외처리 필수로 설정.

    4) sql 문 작성 
     ==> 수업에서 배웠던 모든 SQL 문 사용 가능
     ==> 문장끝의 ; 반드시 제외

     String sql = "select deptno as no, dname, loc from dept";

    5) PreparedStatement ( sql 문을 DBMS로 전달하는 객체) 

      
       import java.sql.PreparedStatement;


       PreparedStatement pstmt = con.prepareStatement(sql);

       SQLException 예외처리 필수로 설정.

    6) sql 문 전송 ( PreparedStatement 의 메서드 이용 )

       가. select 문
         ==> select 문의 실행결과는 테이블(결과셋)로 반환.

          import java.sql.ResultSet;


	  ResultSet rs = pstmt.executeQuery();  // rs가 실행결과 테이블을 참조하는 변수

         SQLException 예외처리 필수로 설정.


	   // 행선택
	  while(rs.next()){
	     // 열선택
	     int deptno = rs.getInt("no");  // 컬럼헤더 또는 순서(1부터)
	     String dname = rs.getString(2);
	     String loc = rs.getString("loc");
	  }


       나. DML 문( insert,delete,update)
         ==> DML문의 실행결과는 영향받은 레코드 갯수

	   
	   int n = pstmt.executeUpdate();   // n은 DML 실행후 영향받은 레코드 갯수

          SQLException 예외처리 필수로 설정.


    7) 자원반납 ( close 작업 )

       사용한 순서는 다음과 같다.
       Connection con
       PreparedStatement pstmt
       ResultSet rs


       반드시 close() 호출은 사용한 역순
       rs.close();
       pstmt.close();
       con.close();

       SQLException 예외처리 필수로 설정.


 5. sql 문에 실제 데이터를 동적으로 설정하는 방법

   1)적용
     select
     insert
     delete
     update

   2) 순서

     가. sql 문 작성

        예> String sql = "select deptno, dname, loc from dept where deptno = ? and dname = ?"  // ? 바인딩 변수

	   pstmt = con.prepareStatement(sql);
           
	   pstmt.setInt( 1 , 10  );
	   pstmt.setString( 2, "개발");

	   rs = pstmt.executeQuery();


    나. DML 문 작성

       예> String sql = "insert into dept (deptno, dname, loc ) values ( ?, ?, ?)";

          pstmt = con.prepareStatement(sql);
          pstmt.setInt(1, 42 );
	  pstmt.setString(2, "인사");
	  pstmt.setString(3, "서울");

	  int n = pstmt.executeUpdate();


6. 트랜잭션 처리
 
   - 기본적으로 JDBC는 auto commit 이다.
     따라서 계좌이체 같은 트랜잭션 처리가 불가능하다.

     그런데 계좌이체 같은 트랜잭션를 처리하기 위해서 auto commit 비활성화 가능하다.
     즉 명시적으로 commit/rollback 이 필요하다.

   - 구현
     
      Connection con = null;

      try{
          con = DriverManager.getConnection(url, userid, passwd);
 con.setAutoCommit(false);
	  insert 작업;
	  update 작업;
	  delete 작업;
 con.commit();

      }catch(SQLException e){
 con.rollback();
      }

7.  기능분리

  1) 기능분리 전

      SeleteTest.java  <-----------------------------> MySQL DBMS
      -화면처리 코드
      -비즈니스로직(가공) 코드
      -DB연동 코드

  2) 기능분리 후

                          DeptService(인터페이스)
     DeptMain.java <----> DeptServiceImpl(클래스) <----> DeptDAO  <----> MySQL DBMS
     -main()               - 비즈니스로직(가공) 코드         -DB연동 코드 
     -화면처리 코드            - 트랜잭션 처리(*********)


8. 예외처리
 
  예> 
    1) 시스템은 에러가 아닌 경우 ( 사용자 입장에서 에러라고 가정 )
     삭제할 레코드가 없는 경우 ( 조회했을 때 레코드가 없는 경우 )
  
     RecordNotFoundException.java 사용자 정의 예외클래스 이용.


    2) 시스템 에러 경우
     저장할 때 pk 중복시 
     
     DuplicatedDeptnoException.java 

 MySQL8 강좌정리

 1. 환경설정

  -  https://dev.mysql.com/downloads/installer/ 다운로드 
  -  설치 3가지  ( MySQL, Workbench, samples )
     관리자 계정: root
          비번: 1234


 2. 참조문서 
   https://docs.oracle.com/cd/E17952_01/mysql-8.0-en/

 3. MySQL 접속방법

   1) 툴 이용
      - Workbench ( 자체적으로 설치가능 )
      - DBeaver.zip ( 다운로드 )
         http://dbeaver.io/download

   2) 프로그램 언어 ( 자바 )
      - JDBC ( Java DataBase Connectivity ) 기술
      - JDBC 특징
         DB 종류와 무관하게 연동 가능( DB에 독립적)
	 컴파일 checked 예외가 발생된다. ( 반드시 try~catch 또는 throws 해야 됨 )

 4. 실습에서 사용할 Database 생성 및 테이블 생성
   
    Database 명: testdb
    테이블 :
         수업에서 사용할 테이블:scott_mysql.sql	
			 
			   emp 테이블 ( 사원 테이블로서 사원 정보가 저장되어 있음 )
			       empno 컬럼 : 사원번호
			       ename 컬럼 : 사원명
			       job   컬럼 : 직업
			       mgr   컬럼 : 관리자 사원번호
			       hiredate 컬럼: 입사일
			       sal   컬럼 : 월급
			       comm 컬럼  : 커미션, job이 SALESMAN인 경우에만 값을 가짐.
			       deptno 컬럼: 부서번호

			   dept 테이블 ( 부서 테이블로서 부서 정보가 저장되어 있음)
			       deptno 컬럼: 부서번호
			       dname 컬럼:  부서명
			       loc 컬럼:    부서위치

			   salgrade 테이블
			       
			       grade 컬럼: sal 등급
			       losal 컬럼: 최저 sal
			       hisal 컬럼: 최고 sal

	 워크샵에서 사용할 테이블:MySQL용_SQL워크샵스크립트.txt


5. 데이터베이스 vs 데이터베이스 관리 시스템 ( DBMS )

   1) 데이터베이스 ( DataBase : DB )
     - 개인, 회사, 관공서등에서 업무적으로 필요한 데이터를 의미.
     예> 사원정보(사원 DB)
        부서정보(부서 DB)
   
   2) 데이터베이스 관리 시스템 ( DataBase Management System : DBMS )
     - 데이터베이스(DB)를 전문적이고 효율적으로 관리하기 위한 S/W 의미.
     - 관리방법 ?

           CRUD 가능 ( Create: 데이터 생성,  SQL문중에서 insert 문 이용.
	              Read  : 데이터 조회,  SQL문중에서 select 문 이용.
		      Update: 데이터 수정,  SQL문중에서 update 문 이용.
		      Delete: 데이터 삭제,  SQL문중에서 delete 문 이용. )

		      insert/delete/update 문: DML ( Data Manipulation Language, 데이터 조작어)
		                              확정/취소 작업: DTL ( Data Transaction Language)
					      확정: commit 문
					      취소: rollback 문

		      select 문: DQL 문 ( Data Query Language )

	  보안(인증/인가) 
	     인증: Authentication ( 예> 우리 회사 사람이야 ? )
	     인가: Ahuthorization ( 예> 이걸 볼 권한이 있어? )
	   
	    ==> 사용자 생성 및 권한 할당

    - 데이터 저장 방법에 따른 DB 종류 ?
         계층형 DB
	 망형 DB
	 객체지향 DB
	 ..
	 관계형 DB ( Relational DataBase: RDB ) : 데이터를 행(레코드)/열(컬럼)로 구성된 2차원 테이블로 관리
     
    ==> 데이터베이스와 데이터베이스 관리 시스템을 데이터베이스 용어로 혼용해서 많이 사용됨.

6.  관계형 DB ( Relational DataBase: RDB )
  
    - 현업에서 사용되는 RDB와 대립되는 구조를 가진 형태: NoSQL  ( Not only SQL, 비정형 구조, {key:value} 구조 )
                                            종류: MongoDB, Casandra, ...
  1) 개념
     행(레코드)/열(컬럼)로 구성된 2차원 테이블로 관리

  2) 종류
     - MySQL ( MariaDB )
     - Oracle
     - MSSQL
     - DB2
      ..

7. SQL ( Structured Query Language )

 1) 개요 및 특징
   - RDB 에서 사용하는 프로그램 언어.
   - 식별자로 구성 ( 예약어 및 사용자 지정 식별자 사용 가능 )
   - 대소문자 구별 안함 ( select 와 SELECT 동일 )
                   ( 'A' 와 'a' 는 MySQL 동일,  Oracle에서는 다르게 처리 ) 
   
   - 자바는 'A'와 "AAA" 구별해서 사용했으나
     SQL문에서는 무조건 'A', 'AAA' , '2024-02-20' 사용하자.
     ""는 별칭(alias)에서만 사용하자.

   - 연산자 
   - 조건문
   - 함수 ( 메서드 역할 )

 2) SQL 종류1 ( DBMS 종류에 따라서 )
  
     가. ANSI SQL ( 표준화된 SQL )
       - 모든 RDB에서 사용 가능한 SQL 의미.

     나. 비 ANSI SQL ( 표준화 안된 SQL )
       - 표준화되지 않은 SQL문이기 때문에 특정 RDB에서만 사용 가능.
        예> MySQL에서만 사용가능한 SQL 문법이 있음.
       - 함수

 2) SQL 종류2 ( 기능,역할 ) -외우기

   가. 데이터 조회 ( DQL: Data Query Language )
      - query 문이라고 하고 select 문이 담당.

   나. 데이터 조작 ( 삽입,수정,삭제, DML: Data Manipulation Language )
      - 데이터 생성: insert 문
      - 데이터 수정: update 문
      - 데이터 삭제: delete 문

   다. DML 확정/취소 ( Data Transaction Language : DTL ,
                    Transaction Control Language : TCL )

       확정: commit 문
       취소: rollback 문

   라. 데이터를 관리할 때 필요한 객체 ( 테이블,인덱스,뷰,시퀀스, 사용자, 권한 ) 조작 ( 생성, 수정, 삭제 )
         ==> DDL 문 ( Data Definition Language )  

       객체 생성: create 문
       객체 수정: alter 문
       객체 삭제: drop 문

 8. select 문

   1) 기능
     - 조회

   2) 기능 3가지

      - projection : 컬럼(열)을 선택
      - selection  : 레코드(행)을 선택
      - join       : 2 개 이상의 테이블에서 연결(조인)해서 원하는 컬럼(projection) 과 
                    레코드(행, selection) 처리.

   3) 문법

      select 절 : 컬럼명,컬럼명2,...
                  *  ( 모든 컬럼의미 )
		 컬럼명+100  ( 연산가능 )
		 함수(컬럼명) ( 예> lower(ename))
		 distinct 컬럼명 ( 중복제거 )
		 리터럴값 ( 예> '홍길동' )
		 컬럼명 as 별칭  ( select 실행후 보여지는 컬럼 헤더값, "별칭" 사용가능, as 생략 가능 )

      from 절  : 테이블명

      ==> 항상 실행결과는 모든 레코드 대상이다. (**********************)
   
 9. null 값 (외우기)

   1) 정의
     - 테이블의 컬럼에 값이 없는것.
       select 하면 값이 비워져서 보임.

   2) 특징
      - 기본적으로 테이블의 컬럼은 null 값을 가질 수 있다.
        강제적으로 null 값을 허용하지 않도록 지정할 수 있다. 
	(이유는 무결성을 보장하기 위한것으로 제약조건(not null 제약조건 타입)을 사용한다.)
      - null 값을 가진 컬럼을 연산하면 결과는 null 로 반환된다. (**************)
       예> 사원연봉

          select empno, ename, sal , (sal*12) + comm   as 연봉,   (sal*12) +  ifnull( comm, 0) as 연봉2   
          from emp;

       제대로 값을 구하기 위해서 ifnull( 컬럼, 기본값 ) 사용한다. ( Oracle 에서는 NVL(컬럼, 기본값 ) 사용 )

     - null 값 및 부정 찾기 :  is null 연산자 사용 ( 자바에서는 s == null )
                           is not null 연산자  

     - 정렬시 null 값을 가장 작은 값으로 처리한다.  ( Oracle 에서는 가장 큰 값으로 처리함 )


10. 제약조건 ( Constraints ) - 외우기
  
   - 컬럼단위로 설정

   1) primary key (pk)제약조건 타입 ( 제약조건명과 다르다. 제약조건명은 사용자가 임의로 지정할 수 있음 )
      - 기본키 제약조건 이라고 부름.
      - 지정된 컬럼은 반드시 값을 가져야 되고 ( not null 제약조건, null 허용 안함 )
                  그 값이 유일한 값(unique 제약조건)을 가져야 된다.
      - 목적: 레코드 식별 예> emp의 empno, dept의 deptno
      - 테이블 당 하나만 설정 가능.	
        복합컬럼이 가능하다.
      - 자동으로 index 객체가 생성된다. 이유는 검색속도 향상.
        그런데 남용하면 안됨. 이유는 반드시 정렬이 필요하고 B트리의 balance 맞추는 작업이 추가될 수 있기
	때문에 성능이 index 사용때보다 더 떨어질 수 있다.

   2) unique (uk)제약조건 타입
      - 지정된 컬럼은 반드시 유일한 값을 가져야 된다. ( null 허용. 즉 값을 안가져도 됨 )
      - 테이블 당 여러개 설정 가능.
        복합컬럼이 가능하다.
      - 자동으로 index 객체가 생성된다. 이유는 검색속도 향상.
          그런데 남용하면 안됨. 이유는 반드시 정렬이 필요하고 B트리의 balance 맞추는 작업이 추가될 수 있기
	때문에 성능이 index 사용때보다 더 떨어질 수 있다.
	
   3) check (ck)제약조건 타입
      - 프로그램 언어(자바)의 비즈니스 로직 관련 제약조건임.
        예> 성별컬럼
	   ------
	    남, 여 ( 가능 )
	    남자, 여자
	    M, F
	    male, female

            나이컬럼 ( age < 100 )
	    ---------
	    1
	    2
	    1000

            중학교학년컬럼
	    -----------
           1학년,2학년,3학년 (가능 )
	   4학년 ( 불가 )

	
   4) foreign key (fk) 제약조건 타입
      - 참조키(외래키) 라고 부름.
      - 조인(join)할 때 사용되는 제약조건임.
      - master의 컬럼중에서 기본키로 설정된 컬럼 또는 unique로 설정된 컬럼만 참조할 수 있다.
      - fk가 가질 수 있는 값은 master의 기본키(unique)컬럼이 가지고 있는 값 또는 null 값만 가질 수 있다.
      - master의 기본키 컬럼명과 fk의 컬럼명은 달라도 된다. ( 권장은 동일하게 지정한다. )

   5) not null (nn)제약조건 타입
     - 컬럼에 null 값을 허용하지 않는 제약조건.

   * 주의
    not null 제약조건은 변경(modify)한다고 말하고
    나머지 4개는 제약조건을 추가(add)한다고 말한다.
    제약조건을 설정하는 문법이 다르다.

11.  select 문 + 조건식 지정 <== 조건식과 일치하는 레코드만 반환 가능. ( 하나라도 일치하는 레코드가 없어도 에러발생 안됨 )
                             조건식을 지정하지 않으면 항상 전체 레코드가 반환됨.

   1) 문법
     
      select 절 : *, 컬럼명,컬럼명1 , 컬럼명+10 , 함수(컬럼), 컬럼 as 별칭,  distinct 컬럼명 <== projection 기능
      from 절   : 테이블명
      where 절; : 조건식  <== selection 기능

   2) 조건식에 사용되는 연산자

     가. 비교 연산자1

        = :  같냐?  ( == 아니다. ) 
	    예> where ename = 'SMITH';  // 문자(열) 데이터는 반드시 ''
	       where sal = 1000;
               where hiredate = '1980-12-17';  // 날짜 데이터는 반드시 ''
       != : 같지 않냐?
       >  : 크냐?
       >= : 크거나 같냐?
       <  : 작냐?
       <= : 작거나 같냐

     나. 비교 연산자2
       - 범위 지정해서 조회

       - between 값1 and 값2;  값1과 값2 포함됨.

       - 수치,문자,날짜 모두 가능함.


     다. 비교 연산자3
       - 한꺼번에 여러개 선택

       - IN (값, 값2, 값3,...);   값 또는 값2 또는 값3 ..
       - 수치,문자,날짜 모두 가능함.

     라. null 값 찾기

       - is null 연산자 이용
         is not null (부정)


     마. like 연산자
       - 패턴으로 조회
       - 반드시 2개의 와일드 카드의 문자와 같이 사용
        
	   % : 0글자 이상 임의의 문자와 치환
	   _ (언더바): 반드시 임의의 하나의 글자와 치환

         예> where ename LIKE 'A%';  <== A, AB, AC, ABDFSFSDFSDFSA 형태의 ename를 찾는 작업
	                            즉 A로 시작하는 ename 찾는 작업이다.

            where ename LIKE '%T';  즉 T로 끝나는 ename 찾는 작업이다.

	    where ename LIKE '%T%';  즉 T 문자가 포함된  ename 찾는 작업이다.

	    where ename LIKE '_T%';  두번째 글자가 T인  ename 찾는 작업이다.

	    where ename LIKE '_T';   이름인 두글자이면서 T로 끝나는 ename 찾는 작업이다.
	    
	    where ename LIKE '_ _ _ _T';  이름인 5글자이면서 T로 끝나는 ename 찾는 작업이다.

      - ESCAPE 문자
       
         예> ename
	   -------
	    A_BB
	    AB%CC
	    _yyyy
	    SMITH

	    이름에서 _ 가 포함된 사람 출력

	     select
	     from 
	     where ename LIKE '%_%'; <== _를 찾고자 하는 _가 아닌 와일드 카드문자로 인식한다.
          
              where ename LIKE '%E_%' ESCAPE 'E'; <== ESCAPE에 지정된 문자 바로뒤의 _(%)는 그냥 문자로 처리됨.
	  
  * 주의할 점
    % :  자바에서는 나머지 연산자로 사용됨.
         mysql에서는 나머지 연산자로 사용됨.( mod 함수 가능)
	 하지만 Oracle에서는  나머지 연산자로 사용 불가. (대신 mod 함수 )

   결론은 나머지 값을 구할때는 % 대신에 mod 함수를 사용하자.


      바. 논리 연산자

        and : 그리고,   두 개의 조건이 모두 일치한 경우에만 조회됨.
	or  : 또는 ,   두 개의 조건중 하나만  일치한 경우에도 조회됨.
	not : 부정  

	럼> where NOT 컬럼=값;
	   where NOT 컬럼 > 값;  <== 컬럼 <= 값 동일
	   where NOT 컬럼 in(값,..) ;
	   where NOT 컬럼 between 값 and 값2;
	   where NOT 컬럼 like '%값';
	   where 컬럼 IS NOT NULL;



12.  정렬
   
    - 기본적으로 테이블내에 저장된 데이터는 정렬이 안된 상태이다.
    - 정렬방법
      오름차순(기본) : ASC|asc
      내림차순      : DESC|desc

    - 문법:
       
         select
	 from
	 where
	 order by  컬럼명  desc;
	 order by  별칭  desc;
	 order by  컬럼순서(1부터) desc;

    날짜데이터 : 1970-01-01 -----------------------------> 현재

    - 다중 졍렬

       order by 컬럼1 asc|desc, 컬럼2 asc|desc;  < == 컬럼1 으로 정렬하고 같은 값이 있는 경우 컬럼2로 다시 정렬.

     
    정리하면
         select 절  - 3번
	 from   절  - 1번
	 where 절   - 2번
	 order by 절 - 4번
///////////////////////////////////////////////////////////////////
2일차

1. 함수( function )

  1) 용도: 자바의 메서드 역할인 데이터 가공처리. ( 기능처리 담당)
  2) 종류

     가. 단일행 함수
       - 테이블의 행(레코드) 단위로 적용되는 함수.
         실행결과는 레코드 갯수만큼 나옴.
     
       - 데이터 종류 따라서 

         a. 문자 데이터
	   - 길이, 대소문자, 부분열, 공백제거,....

	 b. 수치 데이터
	   - 반올림, 절삭, 절대값, ...

	 c. 날짜 데이터
	   - 현재날짜, 날짜만추출, 시간만추출, 연산가능..
	 
	 d. 변환함수

	      수치 <-----> 문자 <------> 날짜
  
         e. etc
	    - ifnull, case, if 
     
     나. 그룹함수( 복수행 함수)
       - 테이블의 그룹단위로 적용되는 함수
         실행결과는 그룹단위 갯수만큼 나옴.
        
	 예> 총합(sum), 평균(avg), 최대값(max), 최소값(min), 갯수(count)

    3) 단일행 함수: 문자 데이터

        길이: length(), char_length()
	대소문자: upper(), lower()
	연결: concat(값, 값, ' ', ... )
	치환: replace(str, from, to )
	     insert(str,pos,len,newstr)

	공백제거:  ltrim(str) : 왼쪽 공백제거
                rtrim(str) : 오른쪽 공백제거 
		trim(str)  : 양쪽 공백제거

		trim( BOTH 값 from str ) : 특정 문자양쪽 제거
		trim( LEADING 값 from str ) : 특정 문자 왼쪽 제거
		trim( TRAILING 값 from str ) : 특정 문자 오른쪽 제거

        수치-->문자열 : format(수치, 자릿수)
	거꾸로: reverse(str)
	특정문자위치: instr(str, 찾을값) , 없으면 0 반환.
	부분열:  substr(str, 시작위치, [길이] )
	       substring(str, 시작위치, [길이])
	       left(str, 길이)
	       right(str, 길이)

	특정문자채우기: LPAD(str, 길이, 채울값)
	            RPAD(str, 길이, 채울값)

        문자열 반복: REPEAT(str,count)
	공백추가: space(n)
          

   4) 단일행 함수 - 수치 함수
  https://docs.oracle.com/cd/E17952_01/mysql-8.0-en/numeric-functions.html

    반올림: round(값, [자릿수])
    절삭:  truncate(값, 자릿수)
    최소 정수: ceil( 값 )
    최대 정수: floor( 값 )
    부호:   sign(값) 양수: 1 음수: -1  0:0
    절대값:  abs(값)
    나머지:  mod() ,  % 도 가능. ( Oracle 불가 )

   5) 단일행 함수 - 날짜 함수 ( 비 ANSI SQL 문법 )
   https://docs.oracle.com/cd/E17952_01/mysql-8.0-en/date-and-time-functions.html


    현재 날짜와 시간 구하기 : NOW(), SYSDATE()  (  Oracle에서는 sysdate ) ( *********)
    현재 날짜 구하기:  curdate(),  current_date(), current_date   (******)
    현재 시간 구하기:  curtime(),  current_time(),  current_time

    day 더하기:  ADDDATE( 날짜, day값|-day값 )
    unit이용한 더하기: DATE_ADD ( 날짜 , INTERVAL  값(-값)  유닛(YEAR|MONTH|DAY|HOUR|MINUTE )

    날짜차이:  DATEDIFF( 날짜1, 날짜2 );   날짜1 - 날짜2 
    unit이용한 날짜차이:  TIMESTAMPDIFF( unit,  날짜1, 날짜2  )

    특정날짜및시간 정보: EXTRACT ( unit  FROM 날짜 )  (******)

    날짜--> 문자열 : DATE_FORMAT( 날짜, 포맷(%Y-%m-%d %H:%i:%S )) (******)

    문자열-->날짜  : STR_TO_DATA ( 문자열, 포맷(앞의 문자열포맷과 동일))  (******)


  6) 단일행 함수 - 조건함수

    - CASE 문 ( ANSI )
    
      가. 동등비교
       
          case 컬럼명  when 비교값1  then 연산식
	             when 비교값2  then 연산식
                     ..
		     else 연산식
	  end

      나. 부등비교

          case when  조건식(비교,between,in,and/or/not ) then 연산
               when  조건식  then 연산
	       ..
               else 연산식
          end

    - if문 ( 자바의 3항 연산자와 비슷 )

        IF (조건식, 참, 거짓 )

   7) 단일행 함수 - 변환 함수

      수치 <-----> 문자 <------> 날짜

      문법:   cast ( 값 as 타입 )

        예>  select cast(10 as char(n)),  // 자바의 String.valueOf(10)
	           cast('10' as SIGNED INTEGER), // Integer.parseInt("10")
		   cast(10 as float),
                   cast('2024-11-25' as Date)

 

   8) 그룹함수
    https://docs.oracle.com/cd/E17952_01/mysql-8.0-en/aggregate-functions.html

     - 함수가 그룹단위로 적용됨.
       만일 명시적으로 그룹단위로 묶는 그룹핑 작업(group by)을 안하면 자동으로 전체 레코드를 가진 하나의 그룹으로 묶는다.
     - 기본적으로 null 제외시키고 처리됨.


     - 종류
       총합:sum([distinct]컬럼)
       평균:avg([distinct]컬럼)
       최대:max([distinct]컬럼)
       최소:min([distinct]컬럼)
       갯수: count([distinct]컬럼)
            count(*): 전체 레코드 갯수

      - 명시적으로 그룹핑하는 방법

         문법:
	      select
	      from 
	      where
              group by 표현식(컬럼)|별칭|select순서  ( Oracle에서는 불가 )
	      order by 표현식(컬럼)|별칭|select순서

         예> job 별, 성별, 학년별, 
	    부서별, 시별, ....

      - having 절
        ==> 그룹핑 이후의 조건지정하는 방법이다.
       
        문법:
	      select    - 5번
	    from 테이블   - 1번
	    where 조건식  - 2번 ( 테이블에 대한 필터링 )
            
	    group by 표현식(컬럼)|별칭|select순서  ( Oracle에서는 불가 )  - 3번
	    having 조건식 ( group by에 대한 필터링 )                   - 4번
	      order by 표현식(컬럼)|별칭|select순서                    - 6번

      - 주의할 점

           select절에서 사용 가능한 일반컬럼은 반드시 group by로 지정해야 된다.
	   where절에서는 그룹함수를 사용할 수 없다. ( having, order by 사용 가능 )

////////////////////////////////////////////////////////////////////////
3일차

1. 조인 (join)
 https://docs.oracle.com/cd/E17952_01/mysql-8.0-en/join.html

  1) query(select) 작업 3가지
   
     - selection : 레코드 선택, where 절
     - projection: 컬럼 선택, select 절
     - join : 2개 이상의 테이블 연결해서 selection 및 projection 처리.

  2) 용도
    - 원하는 데이터가 여러 테이블에 분산되어 있는 경우에
      테이블을 연결(join)해서 데이터를 조회하는 방법이다.

  3) 조인 종류 1 ( 외우기 )

    가. inner 조인 ( 일반적으로 의미하는 조인이다. )
      - 테이블간의 연결고리(일치되는 데이터)가 있는 데이터만 출력하는 방식.
        즉 일치하지 않으면 누락됨.

    나. outer 조인
      - inner 조인 + 일치하지 않아서 누락된 데이터 포함해서 출력하는 방식.

  
  3) 조인 종류 2 ( ANSI 여부 )

     가. ANSI 조인
      - DBMS 독립적

     나. 비 ANSI 조인
       - DBMS 의존적
       예> Oracle 조인 (  w

   
  4)  조인 종류 3 ( 동등:equi조인 /부등: non-equi조인 )
  
    조인 기본 동작

    - pk와 fk 이용
      pk를 가진 쪽을 master 테이블
      fk를 가진 쪽을 slave 테이블
    
    - 연산자를 사용한다면 동등연산자(=)사용하게 된다.
      equi 조인이라고 부르고 inner 조인이다.
    - 일반적으로 조인이이라고 하면 equi 조인을 의미한다.
     
    - 부등연산자를 사용하는 경우에는 Non-equi 조인이라고 부른다.

        emp                          salgrade
     ---------------               -----------------
     empno ename sal               grade losal hisal
     7369  SMITH 800                 1    700  1200

2. ANIS 조인

  1) cross 조인
    
    - 문법:
      
         select 
	 from  테이블1 cross join 테이블2;

    - 동작 및 특징:
       테이블1의 하나의 레코드와과 테이블2의 모든 레코드와 연결된다.
       조인된 결과의 데이터는 사용불가.
       테이블1 레코드 * 테이블2 레코드 만큼 결과가 출력된다.
       
  2) natural 조인 ( 조인조건 )

     - 문법:

         select 컬럼명, ....
	 from  테이블1 natural join 테이블2;

         select 별칭.컬럼명, ....
	 from  테이블1 별칭 natural join 테이블2 별칭;   // as 사용불가
 
     - 동작 및 특징:
        테이블1 과 테이블2에서 공통컬럼을 찾아서 조인한다.
	만약에 공통컬럼이 없으면 조인이 안되고
	     공통컬럼이 2개라면 쌍으로 비교해서 조인한다.
        inner 조인이다.
	단점은 어떤 컬럼으로 조인되었는지를 추가로 확인하는 작업이 필요하다. ( 가독성이 떨어짐 )

     - 검색조건
       where 절 이용

         select 별칭.컬럼명, ....
	 from  테이블1 별칭 natural join 테이블2 별칭   -- 조인조건
	 where 조건식;                             -- 검색조건

	 ANSI는 from절에 조인조건을 지정하고 where절에 검색조건을 지정한다.
	 하지만 oracle 조인에서는 where에 조인조건과 검색조건을 지정한다.
	 
	 예> oracle 조인
	  
	    select
	    from emp e, dept d
	    where e.deptno = d.deptno and d.dname='RESEARCH';


   3) using(컬럼)

     - 문법

         select 컬럼명, ....
	 from  테이블1 [inner] join 테이블2 using(공통컬럼);

	 select 별칭.컬럼명, ....
	 from  테이블1 별칭 [inner] join 테이블2 별칭 using(공통컬럼); // using에서는 별칭사용불가
         where 조건식; // 검색조건

     - 동작 및 특징:
         테이블1과 테이블2에서 using에 설정된 공통컬럼으로 조인한다.
	 inner 조인이다.
	 using에서는 공통컬럼에서는 별칭사용불가

 
    natural join 과 using 에서는 반드시 공통컬럼이 존재해야 된다.
    내부적으로 = 이용해서 조인하기 때문에 equi 조인에 해당된다.

  
    4) on 절 ( 가장 범용적으로 사용 가능 )

     - 문법

         select 컬럼명, ....
	 from  테이블1 [inner] join 테이블2  ON  조인조건
	 where 검색조건;

	  select 별칭.컬럼명, ....
	 from  테이블1 별칭 [inner] join 테이블2 별칭 ON  조인조건
	 where 검색조건;


	 -- 3개 조인
	  select 컬럼명, ....
	  from  테이블1 [inner] join 테이블2 ON  조인조건1
	                      jOin 테이블3 ON  조인조건2;  

          select 컬럼명, ....
	  from  테이블1 natural join 테이블2 
	              natural jOin 테이블3; 
		      
           select 컬럼명, ....
	  from  테이블1 [inner] join 테이블2 using(공통컬럼1)
	                      jOin 테이블3 using(공통컬럼2);


      예> emp와 dept 조인 ( equi조인 )

         select empno, ename, dname , e.deptno <== 공통컬럼 사용시 반드시 별칭을 지정해야 된다. 
	 from emp e  join dept d 
	      ON e.deptno  =  d.deptno;

      예> emp와 salgrade 조인 ( non-equi 조인 )

         select *
	 from emp e join salgrade s 
	      ON e.sal BETWEEN s.losal AND s.hisal; // 조인조건

      예> emp와 dept 와 salgrade 조인

          select *
	  from emp e join dept d using(deptno)
	           join salgrade s on e.sal BETWEEN s.losal AND s.hisal;

	  select *
	  from emp e join dept d ON e.deptno  =  d.deptno
	           join salgrade s on e.sal BETWEEN s.losal AND s.hisal;


     - 특징
       ON절에 조인조건을 명시적으로 지정하기 때문에 어떤 방식으로 조인하는지가 알기 쉽다. ( 가독성이 높다)
       공통컬럼 사용시 반드시 별칭을 지정해야 된다. ( using 에서는 별칭사용 불가 )

     
    5) self 조인
     
      개념: 하나의 테이블에서 자신이 자신의 테이블로 조인하는 방법. inner 조인, equi 조인
      샘플: 사원명과 관리자명을 출력하기
      구현: 별칭 이용

                               emp

           emp e                                emp m
         
      empno  ename  mgr  ..                   empno ename ...
     ------------------                       --------------
      7369  SMITH   7902                       7902  FORD

       SELECT e.ename 사원, m.ename 관리자
       FROM emp e JOIN emp m ON e.mgr = m.empno;

     여기까지가 일치(equi/Non-equi)하는 레코드만 출력되는 INNER 조인 방법이다.

    6) outer 조인
     
       - 일치하지 않는 데이터를 포함해서 조인하는 방법.
         ( left outer join 과 right outer join 2개만 지원됨.
	   full outer join 지원안됨. ( oracle은 지원됨 )

       - 문법:
	
	   select 
           from 테이블1 left outer join 테이블2 using|ON
	   where 조건식;

           => 테이블1 의 레코드는 모두 출력됨. ( 일치하지 않아도 )

	    select 
           from 테이블1 right outer join 테이블2 using|ON
	   where 조건식;
	  
	   => 테이블2 의 레코드는 모두 출력됨. ( 일치하지 않아도 )

	예>
	--  신입사원
	 insert into emp (empno, ename,job,mgr,hiredate,sal,comm,deptno)
	 values ( 9000, '홍길동', 'SALESMAN', 7499, NOW(), 700, 0, null );
	 commit;

	  -- inner 조인이기 때문에 각각 하나씩 누락됨.
	  SELECT e.empno, e.ename, d.dname, e.deptno
	 FROM emp e INNER JOIN dept d USING(deptno);
	 
	  -- 누락된 홍길동 포함
	 SELECT e.empno, e.ename, d.dname, e.deptno
	 FROM emp e LEFT OUTER JOIN dept d USING(deptno);
	 
	  -- 누락된 40 포함
	  use testdb;
	   SELECT e.empno, e.ename, d.dname, d.deptno
	 FROM emp e RIGHT OUTER JOIN dept d USING(deptno);
	 
	    SELECT e.empno, e.ename, d.dname, d.deptno
	 FROM emp e RIGHT OUTER JOIN dept d ON e.deptno = d.deptno;

////////////////////////////////////////////////////////////////////////
4일차

1. 서브쿼리 ( subquery )

  1) 개념(목적)
     한번의 select 문으로는 원하는 결과를 못 얻을 때,
     여러번의 select문을 사용해서 원하는 결과를 얻을 수 있음.

  2) 문법

    예> emp 테이블에서 SCOTT 사원보다 많은 급여를 받는 사원의 이름을 검색 하시오.

      1단계: scott의 sal ?  3000

         select sal
	 from emp
	 where ename='SCOTT';

      2단계: 3000 보다 많은 급여를 받는 사원?


         select *
	 from emp
	 where sal > 3000;

	
   ==> 문법은 3000 위치에 1단계 문장으로 치환하자.

         select *
	 from emp
	 where sal > (select sal
	              from emp
	              where e각ame='SCOTT');

   3) 특징
     - 반드시 () 소괄호를 갖는다.
     - subquery가 먼저 실행되고 그 결과값을 이용해서 main query가 실행됨.
     - subquery를 사용 가능한 위치는 거의 모든 곳에 사용이 가능하다.
       where,having,from,insert,delete,update,create ....
     - main query에서만 order by가 가능하다.

    
   4) subquery 사용시 주의할 점은 연산자이다.

      subquery가 실행후 결과값이 하나 또는 여러개 여부에 따라서 연산자가 각각 제공된다.

      가. 단일행 연산자
         subquery가 실행후 결과값이 하나인 경우에 사용한다.
         비교연산자 ( =, != , >, >=, <,<=)

      나. 복수행 연산자
        subquery가 실행후 결과값이 여러개인 경우에 사용한다.
	  IN, 
	  > any , < any
	  > all , < all
	  exists

       > all: 최대값보다 큰 값 반환
               > (select max() ~ )동일

       < all: 최소값보다 작은 값 반환
               < (select min() ~ )동일

       > any: 최소값보다 큰 값 반환
               > (select min() ~ )동일

       < any: 최대값보다 작은 값 반환
               < (select max() ~ )동일
 
    예>
        select *
	from emp
	where sal > all ( select max(sal)
	                  from emp
			  group by deptno);

       select *
	from emp
	where sal >  ( select max(sal)
	                  from emp
			  group by deptno);


         exists 연산자
	  문법:
	    select
	    from 
	    where exists ( 서브쿼리 );

            서브쿼리가 실행후 결과(레코드)가 있으면 main query가 실행되고
            서브쿼리가 실행후 결과(레코드)가 없으면 main query가 실행안됨.



     5) 인라인 뷰(inline-view)
      
       개념: main query의 from 절에 사용되는 서브쿼리를 의미.

       문법:

           select
	   from (subquery) 별칭
	   where ~;
   
       용도:
          성능이슈
	

       예> emp 와 dept 테이블에서 부서별 sal총합과 평균을 출력?

          // 다음코드는 emp의 15개 레코드와 dept의 4개 레코드가 참여해서 조인됨. 총 60번 비교작업이 필요함.
          select e.deptno, sum(sal), round(avg(sal)), count(*)
	  from emp e join dept d ON e.deptno = d.deptno
	  group by deptno
	  order by 1;


          // 다음코드는 서브쿼리의 4개 레코드와 dept의 4개 레코드가 참여해서 조인됨. 총 16번 비교작업이 필요함.
	        SELECT e.deptno, total_sum, total_avg, cnt 
		 FROM ( SELECT deptno, SUM(sal) total_sum, ROUND(AVG(sal)) total_avg,
		 COUNT(*) cnt
		 FROM emp
		 GROUP BY deptno) e JOIN dept d ON e.deptno = d.deptno
		 order by 1;
	
2.  DML ( Data Manipulation Language : 데이터 조작어 )
https://docs.oracle.com/cd/E17952_01/mysql-8.0-en/sql-data-manipulation-statements.html

  1) 종류

   - insert 문 : 레코드 추가
   - update 문 : 레코드 수정 ( 컬럼단위 수정)
   - delete 문 : 레코드 삭제

   ==> DML은 트랜잭션으로 처리된다.
       따라서 자동시작된 트랜잭션을 명시적으로 종료해야 된다. ( commit/rollback )

  2) 특징
   - 트랜잭션(transaction) 관련된 작업.
     

3. 트랜잭션(transaction)

   1)개념
    - 1개 이상(여러개)의 DML작업들을 하나의 작업처럼 묶어서 처리하는 개념으로
      묶음을 의미.

   2)용도

    예> 계좌이체 ( A---->B, 500 이체 )

      1000            
       A              B

     성공 상태:

      500            500
       A              B
     update          insert

  
       500            
       A              B
 
     실패 상태:

      1000            0
       A              B

    예> 제주도 여행
     
       비행기예약(insert
       숙소예약(insert
       렌트카예약(insert
       ..
    예> member 테이블,  board 테이블

      
       member 탈퇴
        member 테이블(delete)
	board 테이블(delete)
   
    예> 상품테이블  재고테이블
    ...

    3) 트랜잭션은 시작 및 종료

      시작: DML을 사용하면 자동으로 시작됨.
      종료: 명시적으로 TCL(commit, rollback) 지정해야 된다. ( 실제 DB 반영: commit(확정), DB 미반영: rollback(취소)

      트랜잭션 시작   ->
                     insert
                     .. (DML)


      트랜잭션 종료   -> commit (확정)
                     rollback (취소)


4. INSERT 문

  1) 용도
    - 새로운 레코드 생성
    - 단일행 생성, 멀티행 생성

  2) 단일행 생성 방법

     가. 컬럼명 명시
 
         insert into 테이블명 ( 컬럼명, 컬럼명2,...)
	 values            (  값,    값2,  ...);

     나. 컬럼명 생략
        
	 insert into 테이블명 
	 values            (  값,    값2,  ...);